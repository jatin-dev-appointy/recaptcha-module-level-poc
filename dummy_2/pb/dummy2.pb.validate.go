// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dummy2.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on Dummy2Method1Object with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Dummy2Method1Object) Validate(_fields ...string) error {
	if m == nil {
		return nil
	}

	_noFields := true
	_ = _noFields

	_mp := make(map[string]bool, len(_fields))
	_nextLevelFields := make(map[string][]string, len(_fields))

	for _, f := range _fields {
		_noFields = false

		fs := strings.SplitN(f, ".", 2)
		_mp[fs[0]] = true

		_nextLevelFields[fs[0]] = fs[1:]
	}

	if _noFields || _mp["id"] {
		// no validation rules for Id
	}

	if _noFields || _mp["name"] {
		// no validation rules for Name
	}

	return nil
}

// Dummy2Method1ObjectValidationError is the validation error returned by
// Dummy2Method1Object.Validate if the designated constraints aren't met.
type Dummy2Method1ObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Dummy2Method1ObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Dummy2Method1ObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Dummy2Method1ObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Dummy2Method1ObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Dummy2Method1ObjectValidationError) ErrorName() string {
	return "Dummy2Method1ObjectValidationError"
}

// Error satisfies the builtin error interface
func (e Dummy2Method1ObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDummy2Method1Object.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Dummy2Method1ObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Dummy2Method1ObjectValidationError{}

// Validate checks the field values on GetDummy2Method1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDummy2Method1Request) Validate(_fields ...string) error {
	if m == nil {
		return nil
	}

	_noFields := true
	_ = _noFields

	_mp := make(map[string]bool, len(_fields))
	_nextLevelFields := make(map[string][]string, len(_fields))

	for _, f := range _fields {
		_noFields = false

		fs := strings.SplitN(f, ".", 2)
		_mp[fs[0]] = true

		_nextLevelFields[fs[0]] = fs[1:]
	}

	if _noFields || _mp["id"] {
		// no validation rules for Id
	}

	return nil
}

// GetDummy2Method1RequestValidationError is the validation error returned by
// GetDummy2Method1Request.Validate if the designated constraints aren't met.
type GetDummy2Method1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDummy2Method1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDummy2Method1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDummy2Method1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDummy2Method1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDummy2Method1RequestValidationError) ErrorName() string {
	return "GetDummy2Method1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDummy2Method1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDummy2Method1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDummy2Method1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDummy2Method1RequestValidationError{}

// Validate checks the field values on Dummy2Method2Object with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Dummy2Method2Object) Validate(_fields ...string) error {
	if m == nil {
		return nil
	}

	_noFields := true
	_ = _noFields

	_mp := make(map[string]bool, len(_fields))
	_nextLevelFields := make(map[string][]string, len(_fields))

	for _, f := range _fields {
		_noFields = false

		fs := strings.SplitN(f, ".", 2)
		_mp[fs[0]] = true

		_nextLevelFields[fs[0]] = fs[1:]
	}

	if _noFields || _mp["id"] {
		// no validation rules for Id
	}

	if _noFields || _mp["name"] {
		// no validation rules for Name
	}

	return nil
}

// Dummy2Method2ObjectValidationError is the validation error returned by
// Dummy2Method2Object.Validate if the designated constraints aren't met.
type Dummy2Method2ObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Dummy2Method2ObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Dummy2Method2ObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Dummy2Method2ObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Dummy2Method2ObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Dummy2Method2ObjectValidationError) ErrorName() string {
	return "Dummy2Method2ObjectValidationError"
}

// Error satisfies the builtin error interface
func (e Dummy2Method2ObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDummy2Method2Object.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Dummy2Method2ObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Dummy2Method2ObjectValidationError{}

// Validate checks the field values on GetDummy2Method2Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDummy2Method2Request) Validate(_fields ...string) error {
	if m == nil {
		return nil
	}

	_noFields := true
	_ = _noFields

	_mp := make(map[string]bool, len(_fields))
	_nextLevelFields := make(map[string][]string, len(_fields))

	for _, f := range _fields {
		_noFields = false

		fs := strings.SplitN(f, ".", 2)
		_mp[fs[0]] = true

		_nextLevelFields[fs[0]] = fs[1:]
	}

	if _noFields || _mp["id"] {
		// no validation rules for Id
	}

	return nil
}

// GetDummy2Method2RequestValidationError is the validation error returned by
// GetDummy2Method2Request.Validate if the designated constraints aren't met.
type GetDummy2Method2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDummy2Method2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDummy2Method2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDummy2Method2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDummy2Method2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDummy2Method2RequestValidationError) ErrorName() string {
	return "GetDummy2Method2RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDummy2Method2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDummy2Method2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDummy2Method2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDummy2Method2RequestValidationError{}
